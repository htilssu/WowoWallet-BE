CREATE SEQUENCE IF NOT EXISTS order_external_transaction_id_seq INCREMENT BY 1;

CREATE SEQUENCE IF NOT EXISTS order_id_seq INCREMENT BY 1;

CREATE SEQUENCE IF NOT EXISTS partner_id_seq INCREMENT BY 1;

CREATE SEQUENCE IF NOT EXISTS payment_request_id INCREMENT BY 1;

CREATE SEQUENCE IF NOT EXISTS payment_system_id_seq INCREMENT BY 1;

CREATE SEQUENCE IF NOT EXISTS transaction_id_seq INCREMENT BY 1;

CREATE SEQUENCE IF NOT EXISTS user_id_seq INCREMENT BY 1;

CREATE SEQUENCE IF NOT EXISTS wallet_id_seq INCREMENT BY 1;

CREATE SEQUENCE IF NOT EXISTS wallet_transaction_receiver_wallet_seq INCREMENT BY 1;

CREATE SEQUENCE IF NOT EXISTS wallet_transaction_sender_wallet_seq INCREMENT BY 1;

CREATE TABLE employee
(
    id      CHAR(10)       NOT NULL,
    salary  numeric(10, 2) NOT NULL,
    ssn     VARCHAR(15)    NOT NULL,
    role_id INTEGER,
    CONSTRAINT employee_pkey PRIMARY KEY (id)
);

CREATE TABLE financial_statistic
(
    id          INTEGER                     NOT NULL,
    creator     CHAR(10),
    profit      numeric                     NOT NULL,
    income      numeric                     NOT NULL,
    outcome     numeric                     NOT NULL,
    total_money numeric                     NOT NULL,
    created     date DEFAULT 'CURRENT_DATE' NOT NULL,
    CONSTRAINT financial_statistic_pkey PRIMARY KEY (id)
);

CREATE TABLE fund_member
(
    group_id  INTEGER           NOT NULL,
    member_id CHAR(10)          NOT NULL,
    money     numeric DEFAULT 0 NOT NULL,
    CONSTRAINT fund_member_pkey PRIMARY KEY (group_id, member_id)
);

CREATE TABLE group_fund
(
    id          INTEGER        NOT NULL,
    name        VARCHAR(255)   NOT NULL,
    description VARCHAR(255),
    balance     numeric(10, 2) NOT NULL,
    target      numeric(10, 2) NOT NULL,
    owner_id    CHAR(10),
    CONSTRAINT group_fund_pkey PRIMARY KEY (id)
);

CREATE TABLE group_fund_transaction
(
    transaction_id CHAR(15)                    NOT NULL,
    group_id       INTEGER,
    member_id      CHAR(10),
    money          numeric                     NOT NULL,
    created        date DEFAULT 'CURRENT_DATE' NOT NULL,
    CONSTRAINT group_fund_transaction_pkey PRIMARY KEY (transaction_id)
);

CREATE TABLE "order"
(
    id                      VARCHAR(15)                              NOT NULL,
    service_id              INTEGER,
    money                   numeric(10, 2)                           NOT NULL,
    status                  VARCHAR(50)                              NOT NULL,
    invoice_id              VARCHAR(50),
    transaction_id          VARCHAR(15),
    payment_method          INTEGER,
    external_transaction_id INTEGER GENERATED BY DEFAULT AS IDENTITY NOT NULL,
    created                 date DEFAULT 'CURRENT_DATE'              NOT NULL,
    updated                 date DEFAULT 'CURRENT_DATE'              NOT NULL,
    CONSTRAINT order_pkey PRIMARY KEY (id)
);

CREATE TABLE partner
(
    id           CHAR(10) DEFAULT generate_partner_id() NOT NULL,
    name         VARCHAR(255)                           NOT NULL,
    description  TEXT,
    email        VARCHAR(255)                           NOT NULL,
    avatar       VARCHAR(255),
    partner_type VARCHAR(100)                           NOT NULL,
    password     VARCHAR(255)                           NOT NULL,
    api_base_url VARCHAR(255)                           NOT NULL,
    api_key      VARCHAR(255)                           NOT NULL,
    balance      numeric                                NOT NULL,
    created      date     DEFAULT 'CURRENT_DATE',
    CONSTRAINT partner_pkey PRIMARY KEY (id)
);

CREATE TABLE payment_method
(
    id          INTEGER     NOT NULL,
    name        VARCHAR(50) NOT NULL,
    description VARCHAR(255),
    CONSTRAINT payment_method_pkey PRIMARY KEY (id)
);

CREATE TABLE payment_request
(
    id                      VARCHAR(15) DEFAULT generate_payment_request_id() NOT NULL,
    partner_id              CHAR(10),
    money                   numeric(10, 2)                                    NOT NULL,
    status                  VARCHAR(50) DEFAULT '''''pending'''''             NOT NULL,
    transaction_id          VARCHAR(15),
    voucher_id              VARCHAR(50),
    voucher_name            VARCHAR(100),
    voucher_code            VARCHAR(100),
    order_id                VARCHAR(50),
    return_url              VARCHAR(300),
    voucher_discount        numeric(10, 2),
    external_transaction_id VARCHAR(50),
    created                 TIMESTAMP WITHOUT TIME ZONE DEFAULT 'CURRENT_TIMESTAMP'           NOT NULL,
    updated                 TIMESTAMP WITHOUT TIME ZONE DEFAULT 'CURRENT_TIMESTAMP'           NOT NULL,
    CONSTRAINT payment_request_pkey PRIMARY KEY (id)
);

CREATE TABLE payment_system
(
    id         INTEGER GENERATED BY DEFAULT AS IDENTITY NOT NULL,
    name       VARCHAR(50)                              NOT NULL,
    type       PAYMENT_SYSTEM_TYPE                      NOT NULL,
    api_key    VARCHAR(255),
    api_secret VARCHAR(255),
    is_active  BOOLEAN DEFAULT TRUE,
    CONSTRAINT payment_system_pkey PRIMARY KEY (id)
);

CREATE TABLE role
(
    id   INTEGER     NOT NULL,
    name VARCHAR(50) NOT NULL,
    CONSTRAINT role_pkey PRIMARY KEY (id)
);

CREATE TABLE service
(
    id           INTEGER      NOT NULL,
    name         VARCHAR(255) NOT NULL,
    service_type VARCHAR(255) NOT NULL,
    api_key      VARCHAR(255) NOT NULL,
    CONSTRAINT service_pkey PRIMARY KEY (id)
);

CREATE TABLE service_statistic
(
    month   INTEGER NOT NULL,
    year    INTEGER NOT NULL,
    service INTEGER NOT NULL,
    income  numeric NOT NULL,
    outcome numeric NOT NULL,
    CONSTRAINT service_statistic_pkey PRIMARY KEY (month, year, service)
);

CREATE TABLE support_ticket
(
    id          VARCHAR(15)  NOT NULL,
    customer_id CHAR(10),
    title       VARCHAR(255) NOT NULL,
    content     TEXT         NOT NULL,
    status      VARCHAR(50)  NOT NULL,
    CONSTRAINT support_ticket_pkey PRIMARY KEY (id)
);

CREATE TABLE transaction
(
    id                 CHAR(15)    DEFAULT generate_transaction_id() NOT NULL,
    money              numeric(10, 2)                                NOT NULL,
    currency           VARCHAR(3)  DEFAULT '''''VND'''''             NOT NULL,
    transaction_type   VARCHAR(20) DEFAULT '''''transfer'''''        NOT NULL,
    transaction_target VARCHAR(20) DEFAULT '''''wallet'''''          NOT NULL,
    status             VARCHAR(50) DEFAULT '''''pending'''''         NOT NULL,
    created            TIMESTAMP WITHOUT TIME ZONE DEFAULT NOW()                     NOT NULL,
    updated            TIMESTAMP WITHOUT TIME ZONE DEFAULT NOW()                     NOT NULL,
    sender_id          CHAR(10)                                      NOT NULL,
    receiver_id        CHAR(10)                                      NOT NULL,
    sender_type        VARCHAR(20) DEFAULT '''''user'''''            NOT NULL,
    receiver_type      VARCHAR(20) DEFAULT '''''user'''''            NOT NULL,
    CONSTRAINT transaction_pkey PRIMARY KEY (id)
);

CREATE TABLE "user"
(
    id           CHAR(10)                        NOT NULL,
    first_name   VARCHAR(50)                     NOT NULL,
    last_name    VARCHAR(50)                     NOT NULL,
    email        VARCHAR(255)                    NOT NULL,
    user_name    VARCHAR(50),
    avatar       VARCHAR(255),
    password     VARCHAR(255)                    NOT NULL,
    dob          date                            NOT NULL,
    is_active    BOOLEAN  DEFAULT TRUE           NOT NULL,
    is_verified  BOOLEAN  DEFAULT FALSE          NOT NULL,
    gender       BOOLEAN,
    created      date     DEFAULT 'CURRENT_DATE' NOT NULL,
    partner_id   CHAR(10) DEFAULT 'NULL::bpchar',
    address      VARCHAR(255),
    phone_number VARCHAR(10),
    job          VARCHAR(255),
    CONSTRAINT user_pkey PRIMARY KEY (id)
);

CREATE TABLE user_partner
(
    user_id    CHAR(10) NOT NULL,
    partner_id CHAR(10) NOT NULL,
    CONSTRAINT user_partner_pkey PRIMARY KEY (user_id, partner_id)
);

CREATE TABLE wallet
(
    id         INTEGER GENERATED BY DEFAULT AS IDENTITY NOT NULL,
    owner_type VARCHAR(20) DEFAULT '''''user'''''       NOT NULL,
    currency   VARCHAR(3)  DEFAULT '''''VND'''''        NOT NULL,
    owner_id   CHAR(10),
    balance    numeric     DEFAULT 0                    NOT NULL,
    CONSTRAINT wallet_pkey PRIMARY KEY (id)
);

CREATE TABLE wallet_transaction
(
    id              CHAR(15)                                 NOT NULL,
    sender_wallet   INTEGER GENERATED BY DEFAULT AS IDENTITY NOT NULL,
    receiver_wallet INTEGER GENERATED BY DEFAULT AS IDENTITY NOT NULL,
    CONSTRAINT wallet_transaction_pkey PRIMARY KEY (id)
);

ALTER TABLE employee
    ADD CONSTRAINT employee_ssn_key UNIQUE (ssn);

ALTER TABLE "order"
    ADD CONSTRAINT order_invoice_id_key UNIQUE (invoice_id);

ALTER TABLE partner
    ADD CONSTRAINT partner_api_key_key UNIQUE (api_key);

ALTER TABLE partner
    ADD CONSTRAINT partner_email_key UNIQUE (email);

ALTER TABLE payment_request
    ADD CONSTRAINT payment_request_external_transaction_id_key UNIQUE (external_transaction_id);

ALTER TABLE payment_request
    ADD CONSTRAINT payment_request_id_partner_id_key UNIQUE (id, partner_id);

ALTER TABLE payment_request
    ADD CONSTRAINT payment_request_transaction_id_key UNIQUE (transaction_id);

ALTER TABLE wallet
    ADD CONSTRAINT uk_wallet_owner UNIQUE (owner_id, owner_type);

CREATE INDEX user_email_index ON "user" (email);

CREATE INDEX user_index ON "user" (email, user_name, phone_number);

CREATE INDEX user_pn_index ON "user" (phone_number);

CREATE INDEX user_un_index ON "user" (user_name);

ALTER TABLE employee
    ADD CONSTRAINT employee_id_fkey FOREIGN KEY (id) REFERENCES "user" (id) ON DELETE NO ACTION;

ALTER TABLE employee
    ADD CONSTRAINT employee_role_id_fkey FOREIGN KEY (role_id) REFERENCES role (id) ON DELETE NO ACTION;

ALTER TABLE financial_statistic
    ADD CONSTRAINT financial_statistic_creator_fkey FOREIGN KEY (creator) REFERENCES employee (id) ON DELETE NO ACTION;

ALTER TABLE fund_member
    ADD CONSTRAINT fund_member_group_id_fkey FOREIGN KEY (group_id) REFERENCES group_fund (id) ON DELETE NO ACTION;

ALTER TABLE fund_member
    ADD CONSTRAINT fund_member_member_id_fkey FOREIGN KEY (member_id) REFERENCES "user" (id) ON DELETE NO ACTION;

ALTER TABLE group_fund
    ADD CONSTRAINT group_fund_owner_id_fkey FOREIGN KEY (owner_id) REFERENCES "user" (id) ON DELETE NO ACTION;

ALTER TABLE group_fund_transaction
    ADD CONSTRAINT group_fund_transaction_group_id_fkey FOREIGN KEY (group_id) REFERENCES group_fund (id) ON DELETE NO ACTION;

ALTER TABLE group_fund_transaction
    ADD CONSTRAINT group_fund_transaction_member_id_fkey FOREIGN KEY (member_id) REFERENCES "user" (id) ON DELETE NO ACTION;

ALTER TABLE group_fund_transaction
    ADD CONSTRAINT group_fund_transaction_transaction_id_fkey FOREIGN KEY (transaction_id) REFERENCES transaction (id) ON DELETE NO ACTION;

ALTER TABLE "order"
    ADD CONSTRAINT order_payment_method_fkey FOREIGN KEY (payment_method) REFERENCES payment_method (id) ON DELETE NO ACTION;

ALTER TABLE payment_request
    ADD CONSTRAINT payment_request_partner_id_fkey FOREIGN KEY (partner_id) REFERENCES partner (id) ON DELETE NO ACTION;

ALTER TABLE payment_request
    ADD CONSTRAINT payment_request_transaction_id_fkey FOREIGN KEY (transaction_id) REFERENCES transaction (id) ON DELETE NO ACTION;

ALTER TABLE service_statistic
    ADD CONSTRAINT service_statistic_service_fkey FOREIGN KEY (service) REFERENCES service (id) ON DELETE NO ACTION;

ALTER TABLE support_ticket
    ADD CONSTRAINT support_ticket_customer_id_fkey FOREIGN KEY (customer_id) REFERENCES "user" (id) ON DELETE NO ACTION;

ALTER TABLE "user"
    ADD CONSTRAINT user_partner_id_fkey FOREIGN KEY (partner_id) REFERENCES partner (id) ON DELETE NO ACTION;

ALTER TABLE wallet_transaction
    ADD CONSTRAINT wallet_transaction_id_fkey FOREIGN KEY (id) REFERENCES transaction (id) ON DELETE NO ACTION;

ALTER TABLE wallet_transaction
    ADD CONSTRAINT wallet_transaction_receiver_wallet_fkey FOREIGN KEY (receiver_wallet) REFERENCES wallet (id) ON DELETE NO ACTION;

CREATE INDEX wallet_transaction_rc_idx ON wallet_transaction (receiver_wallet);

ALTER TABLE wallet_transaction
    ADD CONSTRAINT wallet_transaction_sender_wallet_fkey FOREIGN KEY (sender_wallet) REFERENCES wallet (id) ON DELETE NO ACTION;

CREATE INDEX wallet_transaction_sd_idx ON wallet_transaction (sender_wallet);