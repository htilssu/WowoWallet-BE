/*
 * ******************************************************
 *  * Copyright (c) 2024 htilssu
 *  *
 *  * This code is the property of htilssu. All rights reserved.
 *  * Redistribution or reproduction of any part of this code
 *  * in any form, with or without modification, is strictly
 *  * prohibited without prior written permission from the author.
 *  *
 *  * Author: htilssu
 *  * Created: 25-11-2024
 *  ******************************************************
 */

CREATE SEQUENCE IF NOT EXISTS application_id_seq START WITH 1 INCREMENT BY 1;

CREATE SEQUENCE IF NOT EXISTS group_fund_id_seq START WITH 1 INCREMENT BY 1;

CREATE SEQUENCE IF NOT EXISTS order_id_seq START WITH 1 INCREMENT BY 1;

CREATE SEQUENCE IF NOT EXISTS role_id_seq START WITH 1 INCREMENT BY 1;

CREATE SEQUENCE IF NOT EXISTS support_ticket_id_seq START WITH 1 INCREMENT BY 1;

CREATE SEQUENCE IF NOT EXISTS verify_id_seq START WITH 1 INCREMENT BY 50;

CREATE SEQUENCE IF NOT EXISTS wallet_id_seq START WITH 1 INCREMENT BY 1;

CREATE TABLE application
(
    id       BIGINT       NOT NULL,
    name     VARCHAR(255),
    secret   VARCHAR(255),
    owner_id VARCHAR(255) NOT NULL,
    CONSTRAINT pk_application PRIMARY KEY (id)
);

CREATE TABLE application_partner_wallet
(
    id             BIGINT NOT NULL,
    application_id BIGINT NOT NULL,
    CONSTRAINT pk_applicationpartnerwallet PRIMARY KEY (id)
);

CREATE TABLE application_wallet
(
    id             BIGINT NOT NULL,
    application_id BIGINT NOT NULL,
    CONSTRAINT pk_applicationwallet PRIMARY KEY (id)
);

CREATE TABLE atm
(
    id   INTEGER      NOT NULL,
    name VARCHAR(255) NOT NULL,
    icon VARCHAR(255),
    CONSTRAINT pk_atm PRIMARY KEY (id)
);

CREATE TABLE atm_card
(
    id          INTEGER GENERATED BY DEFAULT AS IDENTITY NOT NULL,
    bank_id     INTEGER                                  NOT NULL,
    card_number VARCHAR(16)                              NOT NULL,
    ccv         VARCHAR(3),
    holder_name VARCHAR(255)                             NOT NULL,
    owner_id    VARCHAR(255),
    month       INTEGER                                  NOT NULL,
    year        INTEGER                                  NOT NULL,
    created     TIMESTAMP WITHOUT TIME ZONE              NOT NULL,
    CONSTRAINT pk_atm_card PRIMARY KEY (id)
);

CREATE TABLE banks
(
    id                 BIGINT NOT NULL,
    name               TEXT,
    code               TEXT,
    bin                TEXT,
    short_name         TEXT,
    logo               TEXT,
    transfer_supported BIGINT,
    lookup_supported   BIGINT,
    support            BIGINT,
    is_transfer        BIGINT,
    swift_code         TEXT,
    CONSTRAINT pk_banks PRIMARY KEY (id)
);

CREATE TABLE constant
(
    id        VARCHAR(50)      NOT NULL,
    name      VARCHAR(100)     NOT NULL,
    col_value DOUBLE PRECISION NOT NULL,
    created   TIMESTAMP WITHOUT TIME ZONE,
    CONSTRAINT pk_constant PRIMARY KEY (id)
);

CREATE TABLE employee
(
    id      VARCHAR(255) NOT NULL,
    salary  BIGINT       NOT NULL,
    ssn     VARCHAR(15)  NOT NULL,
    role_id INTEGER,
    CONSTRAINT pk_employee PRIMARY KEY (id)
);

CREATE TABLE fund_member
(
    money     BIGINT DEFAULT 0 NOT NULL,
    group_id  BIGINT           NOT NULL,
    member_id VARCHAR(32)      NOT NULL,
    CONSTRAINT pk_fund_member PRIMARY KEY (group_id, member_id)
);

CREATE TABLE group_fund
(
    id           BIGINT                NOT NULL,
    name         VARCHAR(255)          NOT NULL,
    image        VARCHAR(256),
    type         VARCHAR(100),
    description  VARCHAR(255),
    target       BIGINT                NOT NULL,
    owner_id     VARCHAR(255),
    is_locked    BOOLEAN DEFAULT FALSE NOT NULL,
    created_date TIMESTAMP WITHOUT TIME ZONE NOT NULL,
    target_date  date                  NOT NULL,
    CONSTRAINT pk_group_fund PRIMARY KEY (id)
);

CREATE TABLE group_fund_invitation
(
    id           BIGINT GENERATED BY DEFAULT AS IDENTITY NOT NULL,
    group_id     BIGINT                                  NOT NULL,
    sender_id    VARCHAR(255)                            NOT NULL,
    recipient_id VARCHAR(255)                            NOT NULL,
    status       VARCHAR(255),
    created_at   TIMESTAMP WITHOUT TIME ZONE             NOT NULL,
    CONSTRAINT pk_group_fund_invitation PRIMARY KEY (id)
);

CREATE TABLE group_fund_wallet
(
    id            BIGINT NOT NULL,
    group_fund_id BIGINT NOT NULL,
    CONSTRAINT pk_groupfundwallet PRIMARY KEY (id)
);

CREATE TABLE "order"
(
    id             BIGINT       NOT NULL,
    application_id BIGINT       NOT NULL,
    money          BIGINT       NOT NULL,
    discount_money BIGINT,
    status         VARCHAR(255) NOT NULL,
    transaction_id VARCHAR(40),
    return_url     VARCHAR(300),
    success_url    VARCHAR(300),
    created        TIMESTAMP WITHOUT TIME ZONE NOT NULL,
    updated        TIMESTAMP WITHOUT TIME ZONE NOT NULL,
    service_name   VARCHAR(100),
    CONSTRAINT pk_order PRIMARY KEY (id)
);

CREATE TABLE payment_method
(
    id          INTEGER     NOT NULL,
    name        VARCHAR(50) NOT NULL,
    description VARCHAR(255),
    CONSTRAINT pk_payment_method PRIMARY KEY (id)
);

CREATE TABLE role
(
    id   INTEGER     NOT NULL,
    name VARCHAR(50) NOT NULL,
    CONSTRAINT pk_role PRIMARY KEY (id)
);

CREATE TABLE support_ticket
(
    id          BIGINT       NOT NULL,
    customer_id VARCHAR(255),
    title       VARCHAR(255) NOT NULL,
    content     TEXT         NOT NULL,
    status      SMALLINT     NOT NULL,
    CONSTRAINT pk_support_ticket PRIMARY KEY (id)
);

CREATE TABLE transaction
(
    id             VARCHAR(40)  NOT NULL,
    amount         BIGINT       NOT NULL,
    receiver_name  VARCHAR(255),
    sender_name    VARCHAR(255),
    flow_type      VARCHAR(255) NOT NULL,
    message        VARCHAR(300),
    type           VARCHAR(255),
    created        TIMESTAMP WITHOUT TIME ZONE NOT NULL,
    updated        TIMESTAMP WITHOUT TIME ZONE NOT NULL,
    source_wallet  BIGINT       NOT NULL,
    receive_wallet BIGINT       NOT NULL,
    CONSTRAINT pk_transaction PRIMARY KEY (id)
);

CREATE TABLE "user"
(
    id          VARCHAR(255)          NOT NULL,
    username    VARCHAR(255),
    email       VARCHAR(255),
    first_name  VARCHAR(255),
    last_name   VARCHAR(255),
    is_active   BOOLEAN DEFAULT TRUE  NOT NULL,
    is_verified BOOLEAN DEFAULT FALSE NOT NULL,
    total_money BIGINT  DEFAULT 0     NOT NULL,
    job         VARCHAR(255),
    avatar      VARCHAR(255),
    CONSTRAINT pk_user PRIMARY KEY (id)
);

CREATE TABLE user_wallet
(
    id      BIGINT NOT NULL,
    user_id VARCHAR(255),
    CONSTRAINT pk_userwallet PRIMARY KEY (id)
);

CREATE TABLE verify
(
    id           BIGINT       NOT NULL,
    customer_id  VARCHAR(255),
    type         VARCHAR(255) NOT NULL,
    number_card  BIGINT       NOT NULL,
    open_day     TIMESTAMP WITHOUT TIME ZONE NOT NULL,
    close_day    TIMESTAMP WITHOUT TIME ZONE NOT NULL,
    font_image   VARCHAR(255) NOT NULL,
    behind_image VARCHAR(255) NOT NULL,
    user_image   VARCHAR(255) NOT NULL,
    CONSTRAINT pk_verify PRIMARY KEY (id)
);

CREATE TABLE wallet
(
    id       BIGINT                   NOT NULL,
    type     VARCHAR(31),
    balance  BIGINT,
    currency VARCHAR(5) DEFAULT 'VND' NOT NULL,
    version  BIGINT,
    CONSTRAINT pk_wallet PRIMARY KEY (id)
);

ALTER TABLE application
    ADD CONSTRAINT uc_application_secret UNIQUE (secret);

ALTER TABLE atm_card
    ADD CONSTRAINT uc_atm_card_card_number UNIQUE (card_number);

ALTER TABLE "user"
    ADD CONSTRAINT uc_user_email UNIQUE (email);

ALTER TABLE "user"
    ADD CONSTRAINT uc_user_username UNIQUE (username);

CREATE INDEX search_unique_user ON "user" (id, username, email);

ALTER TABLE application_partner_wallet
    ADD CONSTRAINT FK_APPLICATIONPARTNERWALLET_ON_APPLICATION FOREIGN KEY (application_id) REFERENCES application (id);

ALTER TABLE application_partner_wallet
    ADD CONSTRAINT FK_APPLICATIONPARTNERWALLET_ON_ID FOREIGN KEY (id) REFERENCES wallet (id);

ALTER TABLE application_wallet
    ADD CONSTRAINT FK_APPLICATIONWALLET_ON_APPLICATION FOREIGN KEY (application_id) REFERENCES application (id);

ALTER TABLE application_wallet
    ADD CONSTRAINT FK_APPLICATIONWALLET_ON_ID FOREIGN KEY (id) REFERENCES wallet (id);

ALTER TABLE application
    ADD CONSTRAINT FK_APPLICATION_ON_OWNER FOREIGN KEY (owner_id) REFERENCES "user" (id);

ALTER TABLE atm_card
    ADD CONSTRAINT FK_ATM_CARD_ON_BANK FOREIGN KEY (bank_id) REFERENCES banks (id);

CREATE INDEX atm_card_bank_id_index ON atm_card (bank_id);

ALTER TABLE atm_card
    ADD CONSTRAINT FK_ATM_CARD_ON_OWNER FOREIGN KEY (owner_id) REFERENCES "user" (id);

CREATE INDEX atm_card_owner_id_index ON atm_card (owner_id);

ALTER TABLE employee
    ADD CONSTRAINT FK_EMPLOYEE_ON_ID FOREIGN KEY (id) REFERENCES "user" (id);

ALTER TABLE employee
    ADD CONSTRAINT FK_EMPLOYEE_ON_ROLE FOREIGN KEY (role_id) REFERENCES role (id);

ALTER TABLE fund_member
    ADD CONSTRAINT FK_FUND_MEMBER_ON_GROUP FOREIGN KEY (group_id) REFERENCES group_fund (id);

CREATE INDEX fund_member_group_id_index ON fund_member (group_id);

ALTER TABLE fund_member
    ADD CONSTRAINT FK_FUND_MEMBER_ON_MEMBER FOREIGN KEY (member_id) REFERENCES "user" (id);

ALTER TABLE group_fund_wallet
    ADD CONSTRAINT FK_GROUPFUNDWALLET_ON_GROUPFUND FOREIGN KEY (group_fund_id) REFERENCES group_fund (id);

ALTER TABLE group_fund_wallet
    ADD CONSTRAINT FK_GROUPFUNDWALLET_ON_ID FOREIGN KEY (id) REFERENCES wallet (id);

ALTER TABLE group_fund_invitation
    ADD CONSTRAINT FK_GROUP_FUND_INVITATION_ON_GROUP FOREIGN KEY (group_id) REFERENCES group_fund (id);

ALTER TABLE group_fund_invitation
    ADD CONSTRAINT FK_GROUP_FUND_INVITATION_ON_RECIPIENT FOREIGN KEY (recipient_id) REFERENCES "user" (id);

ALTER TABLE group_fund_invitation
    ADD CONSTRAINT FK_GROUP_FUND_INVITATION_ON_SENDER FOREIGN KEY (sender_id) REFERENCES "user" (id);

ALTER TABLE group_fund
    ADD CONSTRAINT FK_GROUP_FUND_ON_OWNER FOREIGN KEY (owner_id) REFERENCES "user" (id);

ALTER TABLE "order"
    ADD CONSTRAINT FK_ORDER_ON_APPLICATION FOREIGN KEY (application_id) REFERENCES application (id);

ALTER TABLE "order"
    ADD CONSTRAINT FK_ORDER_ON_TRANSACTION FOREIGN KEY (transaction_id) REFERENCES transaction (id);

ALTER TABLE support_ticket
    ADD CONSTRAINT FK_SUPPORT_TICKET_ON_CUSTOMER FOREIGN KEY (customer_id) REFERENCES "user" (id);

ALTER TABLE transaction
    ADD CONSTRAINT FK_TRANSACTION_ON_RECEIVE_WALLET FOREIGN KEY (receive_wallet) REFERENCES wallet (id);

ALTER TABLE transaction
    ADD CONSTRAINT FK_TRANSACTION_ON_SOURCE_WALLET FOREIGN KEY (source_wallet) REFERENCES wallet (id);

ALTER TABLE user_wallet
    ADD CONSTRAINT FK_USERWALLET_ON_ID FOREIGN KEY (id) REFERENCES wallet (id);

ALTER TABLE user_wallet
    ADD CONSTRAINT FK_USERWALLET_ON_USER FOREIGN KEY (user_id) REFERENCES "user" (id);

ALTER TABLE verify
    ADD CONSTRAINT FK_VERIFY_ON_CUSTOMER FOREIGN KEY (customer_id) REFERENCES "user" (id);